import re
import unicodedata
from pymystem3 import Mystem
import ast
import json
class strings:
    def __init__(self):
        self.m = Mystem()
        self.keys = {'–ê': ['·éØ', '‚Ç≥', '«∫', '«ª', 'Œ±', 'Œ¨', '«†', '·∫´', '·∫Æ', '·∫Ø', '·∫∞', '·∫±', '·∫≥', '·∫¥', '·∫µ', '√Ñ', '¬™', '√§', '√Ö', '√Ä', '√Å', '√Ç', '√•', '√£', '√¢', '√†', '√°', '√É', '·ó©', '@', '»∫', '«û'], '–ë': ['“î', '“ï', 'œ¨', 'œ≠', '', '', '∆É', '…ì'], '–í': ['‚Ñ¨', '·è∞', 'Œ≤', '‡∏ø', '√ü', '·ó∑', '·óΩ', '·óæ', '·óø', '∆Å', '·è∞', '·ó∏', '·óπ'], '–ì': ['‡≠Æ', '‚îç', '‚Ñæ'], '–î': ['‚Ñä', '‚àÇ'], '–ï': ['‚Ñ∞', '‚ÑØ', '‡ªÇ', 'ƒí', '‚ÑÆ', 'ƒì', 'ƒñ', 'ƒó', 'ƒò', 'ƒõ', 'ƒö', 'ƒô', 'Œà', '√™', '√ä', '√à', '‚Ç¨', '√â', '·∫æ', '·ªÄ', '·ªÇ', '·ªÑ', '√©', '√®', 'ÿπ–Ñ', '—î', 'Œ≠', 'Œµ', '“æ', '“ø'], '–ñ': ['‚ôÖ', '“ñ', '“ó', '”ú', '”ù', '”Å', '”Ç'], '–ó': ['’Ö', '‚Ñ®', '·É≥'], '–ò': ['‡∏ô', '·ª±', '”§', '”•', '≈®', '≈©', '≈™', '≈´', '≈¨', '≈≠', '√ô', '√∫', '√ö', '√π', '“ä', '“ã'], '–ö': ['‚Ç≠', '·è¶', '–å', 'k', '—ú', 'ƒ∑', 'ƒ∂', '“ú', '“ù', '·∂Ñ', '“†', '“°'], '–õ': ['·àà', '·àâ', '·àä', '·àå', '·àç', '·àé', '·èó', '·èÅ'], '–ú': ['·å†', '·õñ', '‚Ñ≥', ' ç', '·∂Ü', '·∏æ', '·∏ø', '·ó∞', '·ô¢', 'Áà™', '‚Ç•'], '–ù': ['‡®Æ', '·ãò', '·ãô', '·ãö', '·ãõ', '·ãú', '·ãù', '·ãû', '·ãü', '‚Ñç', '‚Ñã', '‚Ñé', '‚Ñå', '‚Ñè', '·ãô', '·è•', 'ƒ§', 'ƒ¶', 'Œâ', '·∏®', '”à'], '–û': ['·É¢', '√≥', 'œå', 'œÉ', '«ø', '«æ', 'Œò', '√≤', '√ì', '√í', '√î', '√¥', '√ñ', '√∂', '√ï', '√µ', '·ªù', '·ªõ', '·ªç', '·ªå', '·ª£', '·ª¢', '√∏', '√ò', 'Œå', '·ªû', '·ªú', '·ªö', '·ªî', '·ª¢', '≈å', '≈ç', '≈ê'], '–ü': ['’à', '‡∫Å', '‚ãí', '“¶', '“ß'], '–†': ['’©', '‚Ñô', '‚Ñò', 'œÅ', '·éÆ', '·éµ', 'Â∞∏', '“é', '“è', '·∂à', '‚Ç±', '‚òß', '·ñò', '◊ß', '‚ÇΩ', '«∑', '“é', '“è'], '–°': ['·Ç∫', '‚òæ', '‚Ñ≠', '‚ÑÇ', '√á', '¬¢', '√ß', 'ƒå', 'ƒã', 'ƒä', 'ƒâ', 'œÇ', 'ƒà', 'ƒá', 'ƒÜ', 'ƒç', '·∏à', '·∏â', '‚äÇ', '·è®', '‚Ç°', '¬¢'], '–¢': ['‚çë', '‚ç°', 'T', 't', 'œÑ', '≈¢', '≈§', '≈¶', '·π™', '‚ÇÆ'], '–£': ['◊¢', '…£', '·é©', '·éΩ', '·∫é', '·∫è', 'œí', '…§', 'Ôø•', '‡Ø∂', '·Ç∏'], '–§': ['’ì', '÷É', '·Ç¥', '·âÅ', '·âÇ', '·âÉ', '·âÑ', '·âÖ', '·âÜ', '·âá', '·âà'], '–¶': ['‘±', '≈≥'], '–ß': ['‘ø', '’Ø', '‡©´', '·Ç°', '”¥', '”µ', '“∏', '“π'], '–®': ['◊©', '·óØ', '·ô°', 'œâ'], '–©': ['’∫', '‡™ñ'], '–™': ['—¢', '—£'], '–´': ['”∏', '”π'], '–¨': ['—¢', '—£'], '–≠': ['‚àã', '‚àå', '‚àç', '„É®', '”¨', '”≠', '‚Ñà'], '–Æ': ['‡®†'], 'A': ['·éØ', 'Âá°', '·èò', '‚àÄ', '‚Ç≥', '«∫', '«ª', 'Œ±', 'Œ¨', 'ŒÜ', '·∫´', '·∫Æ', '·∫Ø', '·∫∞', '·∫±', '·∫≥', '·∫¥', '·∫µ', '√Ñ', '¬™', '√§', '√Ö', '√Ä', '√Å', '√Ç', '√•', '√£', '√¢', '√†', '√°', '√É', '·µ∞'], 'B': ['‚Ñ¨', '·è∞', 'Œ≤', '‡∏ø', '√ü', '–Ç', '∆Å', '∆Ä', '·ÉÆ', 'Êñπ', '‚ê¢', '·é¥'], 'C': ['‚Ñ≠', '‚ÑÇ', '√á', '¬¢', '√ß', 'ƒå', 'ƒã', 'ƒä', 'ƒâ', 'œÇ', 'ƒà', 'ƒá', 'ƒÜ', 'ƒç', '·∏à', '·∏â', '‚äÇ', '·è®', '‚Ç°', '¬¢'], 'D': ['∆ä', 'ƒé', 'ƒè', 'ƒê', 'ƒë', '√∞', '‚àÇ', '‚Ç´', '»°'], 'E': ['‚ÑØ', '¬£', 'ƒí', '‚ÑÆ', 'ƒì', 'ƒñ', 'ƒó', 'ƒò', 'ƒõ', 'ƒö', 'ƒô', 'Œà', '√™', 'Œæ', '√ä', '√à', '‚Ç¨', '√â', '‚àë', '·∫æ', '·ªÄ', '·ªÇ', '·ªÑ', '√©', '√®', 'ÿπ', '–Ñ', '—î', 'Œ≠', 'Œµ'], 'F': ['‚Ñ±', '‚Ç£', '∆í', '‚àÆ', '·∏û', '·∏ü', '·É∂', '·∂Ç', 'œÜ‚ïí'], 'G': ['·è©', '·é∂', '‚Ñä', '«§', '«•', 'ƒú', 'ƒù', 'ƒû', 'ƒü', 'ƒ†', 'ƒ°', 'ƒ¢', 'ƒ£', '◊§', '·∂É', '‚Ç≤'], 'H': ['‚Ñç', '‚Ñã', '‚Ñé', '‚Ñå', '‚Ñè', '·ãô', '·è•', 'ƒ§', 'ƒ¶', 'ƒß', 'Œâ', 'Âªæ', '–ã', '—í', '·∏®', '“∫', '·∏©'], 'I': ['‚Ñê', '‚Ñë', 'ŒØ', 'Œπ', '√è', 'Œä', '√é', '√¨', '√å', '√≠', '√ç', '√Æ', 'œä', 'Œê', 'ƒ®', 'ƒ©', 'ƒ™', 'ƒ´', 'ƒ¨', 'ƒ≠', 'ƒ∞', 'ƒØ', 'ƒÆ', '·é•'], 'J': ['·Éü', 'ƒ¥', 'ƒµ', '·∂ñ', '…â'], 'K': ['‚Ç≠', '·è¶', '–å', 'k', '—ú', 'ƒ∑', 'ƒ∂', '“ú', '“ù', 'Ôª∏', '·∂Ñ'], 'L': ['‚Ñí', '‚Ñì', 'ƒø', '≈Ä', '¬£', 'ƒπ', 'ƒ∫', 'ƒª', 'ƒº', 'Œª', '‚Ç§', '≈Å', '≈Ç', 'ƒæ', 'ƒΩ', '·∏º', '·∏Ω', '»¥', '·èù', 'Ôø°', '·èÅ'], 'M': ['‚Ñ≥', ' ç', '·∂Ü', '·∏æ', '·∏ø', 'Áà™', '‚Ç•'], 'N': ['‚Ñï', 'Œ∑', '√±', '◊ó', '√ë', 'ŒÆ', '≈ã', '≈ä', '≈É', '≈Ñ', '≈Ö', '≈Ü', '≈á', '≈à', '≈â', '»µ', '‚Ñµ', '‚Ç¶'], 'O': ['‚Ñ¥', '·É¢', 'Ÿ•', 'Œå', '√≥', 'œå', 'œÉ', '«ø', '«æ', 'Œò', '√≤', '√ì', '√í', '√î', '√¥', '√ñ', '√∂', '√ï', '√µ', '·ªù', '·ªõ', '·ªç', '·ªå', '·ª£', '·ª¢', '√∏', '√ò', 'Œå', '·ªû', '·ªú', '·ªö', '·ªî', '·ªï', '·ª¢', '≈å', '≈ç'], 'P': ['‚Ñô', '‚Ñò', '√æ', '√û', 'œÅ', '·éÆ', '·éµ', 'Â∞∏', '“é', '“è', '·∂à', '‚Ç±', '◊ß', '„Ç°'], 'Q': ['‚Ñö', 'q', 'Q', '·∂ê', '«¨', '«≠', '·Éπ'], 'R': ['‚Ñù', '‚Ñú', '‚Ñõ', '‚Ñü', '·É©', '≈ô', '≈ò', '≈ó', '≈ñ', '≈ï', '≈î', '·∂â', '·èí', 'Â∞∫'], 'S': ['·èï', '·π¶', '·πß', '»ø', 'Ÿâ', '¬ß', '≈ö', '≈õ', '≈°', '≈†', '≈ü', '≈û', '≈ù', '≈ú', '‚Ç∞', '‚à´', '$', '÷Ü'], 'T': ['‚Ç∏', '‚Ä†', 'T', 't', 'œÑ', 'Œê', '≈¢', '≈£', '≈§', '≈•', '≈ß', '≈¶', '„Ç£', 'Âπ≤', '·π™', '·π´', '„Éä', '·éø', '·èÜ', '„ÉÜ', '‚ÇÆ'], 'U': ['‚à™', '≈®', '‚ãí', '·ª¶', '·ª™', '·ª¨', '·ªÆ', '·ª∞', 'œç', 'œã', '√ô', '√∫', '√ö', 'Œ∞', '√π', '√õ', '√ª', '√ú', '·ª≠', '·ªØ', '·ª±', '–è', '√º', '·ª´', '≈®', '≈©', '≈™', '≈´', '≈¨', '≈≠', '≈≥', '≈≤', '≈±', '≈∞', '≈Ø', '≈Æ'], 'V': ['‚à®', '‚àö', '·èâ', '·πº', '·πΩ', '·∂å', '\\/', '‚Ñ£', ' ã'], 'W': ['‚Ç©', '·∫É', '·∫Ç', '·∫Å', '·∫Ä', '·∫Ö', 'œé', 'œâ', '≈µ', '≈¥', '·èî', '·é≥', '‡∏¨', '·∫Ñ', '—°', '·èä', '·èá', '‡∏ú', '‡∏ù', '‡∏û', '‡∏ü'], 'Z': ['‚Ñ§', '‚Ñ®', '·É≥', '‰πô', '·∫ê', '·∫ë', '…Ä', '·èÉ']}
        self.conversion_dict = {}
        for key in self.keys:
            for symv in self.keys[key]:
                self.conversion_dict[symv] = key
        "–∏–º. ·¥†·¥è·¥Ö…™·¥Ñ ú·¥ã·¥Ä. (tg://openmessage?user_id=5291004538)"
        "] ·Ö† ·Ö† ·Ö† ·Ö† –∞–¥–º–∏–Ω "
        keys = {
            'Œ£': '–°', 
            'œÉ': 'o', 
            'œÜ': '—Ñ', 
            'Œ±': '–∞',
            " Ç": "s", 
            "…¨": "i", 
            "·Éß": "y", 
            "∆ñ": "l", 
            "…õ": "e", 
            "“≥": "x", 
            "·éæ": "O", 
            "‡´Ø": "E", 
            "·ëØ": "d",
            "üá¶": "A",
            "üáß": "B",
            "üá®": "C",
            "üá©": "D",
            "üá™": "E",
            "üá´": "F",
            "üá¨": "G",
            "üá≠": "H",
            "üáÆ": "I",
            "üáØ": "J",
            "üá∞": "K",
            "üá±": "L",
            "üá≥": "N",
            "üá¥": "O",
            "üáµ": "P",
            "üá∂": "Q",
            "üá∑": "R",
            "üá∏": "S",
            "üáπ": "T",
            "üá∫": "Y",
            "üáª": "V",
            "üáº": "W",
            "üáΩ": "X",
            "üáæ": "Y",
            "üáø": "Z",
            "üá≤": "M",
            "·è¥": "B",
            "·è´": "O",
            "·é∑": "M",
            "ë≤≠": "",
            " ": ""
            # " Ä": "R",
            # "·¥†": "V",
            # "·¥è": "O",
            # "·¥Ö": "D",
            # "…™": "I",
            # "·¥Ñ": "C",
            # " ú": "H",
            # "·¥ã": "K",
            # "·¥Ä": "A"
        }
        for key in keys:
            self.conversion_dict[key] = keys[key]
    def short_num(self, num: str | int) -> str:
        num = reversed(re.sub(r"[^\d]", r"", str(num)))
        result = []
        count = 0
        for i in num:
            if count%3 == 0 and count != 0: result.append(' ')
            result.append(i)
            count += 1
        if len(result) >= 5:
            result[3] = "."
            result.pop(0)
            result.pop(0)
            result.insert(0, "k")
        return ''.join(reversed(result)).replace(".0k", "k")
    def beautiful_num(self, num: str | int) -> str:
        num = ''.join(reversed(str(num)))
        result = ''
        count = 0
        for i in num:
            if count%3 == 0: result += ' '
            result += i
            count += 1
        return ''.join(reversed(str(result))).strip()
    def format_dict(_item, indent=4, base_indent=None):
        if base_indent is None:
            base_indent = indent
        result = "{\n"
        count = 0
        for i in _item:
            comma = "" if len(_item) - 1 == count else ","
            if isinstance(_item[i], str):
                result += " " * (indent+4) + f'"{i}": "{_item[i]}"{comma}\n'
            elif isinstance(_item[i], dict):
                result += " " * (indent+4) + f'"{i}": ' + strings.format_dict(_item[i], indent=base_indent + indent, base_indent=base_indent) + comma + "\n"
            else:
                result += " " * (indent+4) + f'"{i}": {_item[i]}{comma}\n'
            count += 1
        result += " " * (indent - base_indent) + "}"
        return result

    def deEmojify(self, text):
        regrex_pattern = re.compile(pattern = "["
                               u"\U0001F600-\U0001F64F"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
                               u"\U0001F300-\U0001F5FF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤
                               u"\U0001F680-\U0001F6FF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                               u"\U0001F700-\U0001F77F"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                               u"\U0001F780-\U0001F7FF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                               u"\U0001F800-\U0001F8FF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                               u"\U0001F900-\U0001F9FF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                               u"\U0001FA00-\U0001FA6F"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
                               u"\U0001FA70-\U0001FAFF"  # —ç–º–æ–¥–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)"
                               u"\U0001F004-\U0001F0CF"  # —ç–º–æ–¥–∑–∏ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                               u"\U0001F170-\U0001F251"  # —ç–º–æ–¥–∑–∏ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                               u"\U0001F004-\U0001F251"  # —ç–º–æ–¥–∑–∏ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                               u"\U000025AA-\U00002B06"  # –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Ç—Ä–µ–ª–∫–∏
                               u"\U0000231A-\U0001F251"
                               "]+", flags = re.UNICODE)
        return regrex_pattern.sub(r'',text)
    
    def normalaze(self, text: str, for_html: bool=True, replace=None, with_emoji: bool=False):
        text = str(text)
        text = unicodedata.normalize('NFKD', text.replace("–π", "*h234*")) # *h234* –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—É–∫–≤–∞ –π –ø–µ—Ä–µ–∂–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –∏–Ω–∞—á–µ –æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ
        text = ''.join([char for char in text if not unicodedata.combining(char)]).replace("*h234*", "–π")
        text = re.sub(r'[\u0600-\u06FF]+', '', text)
        text = unicodedata.normalize('NFC', text)
        text = ''.join([self.conversion_dict.get(char, char) for char in text])

        if for_html: text = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        if not with_emoji: text = self.deEmojify(text)
        if replace is not None and text.replace(" ", "").replace("\t", "").replace("\n", "").replace("\r", "") == "": text = replace
        # text = emoji.demojize(text)

        return str(text).strip("·Ö†")
    
    def skl(self, num):
        skls = {
            "1-20": ['–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å'],
            "%10": ['–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'],
            "%100": ['—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç'],
            "%1000": ['—Ç—ã—Å—è—á–∞', '–¥–≤–µ —Ç—ã—Å—è—á–∏', '—Ç—Ä–∏ —Ç—ã—Å—è—á–∏', '—á–µ—Ç—ã—Ä–µ —Ç—ã—Å—è—á–∏', '–ø—è—Ç—å —Ç—ã—Å—è—á', '—à–µ—Å—Ç—å —Ç—ã—Å—è—á']
        }
        result = ''
        if num < 20:
            result = skls['1-20'][num-1]
        elif num < 100:
            result += skls['%10'][int(str(num)[0])-1]
            if num%10 != 0:
                result += ' ' + skls['1-20'][int(str(num)[1])-1]
        elif num < 1000:
            result += skls['%100'][int(str(num)[0])-1]
            if num%100 != 0:
                result += ' ' + skls['%10'][int(str(num)[1])-1] if str(num)[1] != '0' else ''
                if num%10 != 0:
                    result += ' ' + skls['1-20'][int(str(num)[2])-1]
        elif num < 10000:
            result += skls['%1000'][int(str(num)[0])-1]
            if num%1000 != 0:
                result += ' ' + skls['%100'][int(str(num)[1])-1] if str(num)[1] != '0' else ''
                if num%100 != 0:
                    result += ' ' + skls['%10'][int(str(num)[2])-1] if str(num)[2] != '0' else ''
                    if num%10 != 0:
                        result += ' ' + skls['1-20'][int(str(num)[3])-1]

        return result
    
    def decline_word(self, word):
        result = self.m.analyze(word)
        try:
            if result and 'analysis' in result[0]:
                lemma = result[0]['analysis'][0]['lex']
                gramm_info = result[0]['analysis'][0]['gr']

                return lemma.capitalize() if word[0].isupper() else lemma
        except: pass

        return word
    def is_dict_string(s):
        try: return ast.literal_eval(str(s))
        except (SyntaxError, ValueError): return None
    def is_valid_json(s):
        try: return json.loads(str(s))
        except ValueError: return None